if !has('nvim')
  set nocompatible
endif

" python virtualenvs
let g:python_host_prog = stdpath('data').'/pyvenv/python2/bin/python'
let g:python3_host_prog = stdpath('data').'/pyvenv/python3/bin/python'

" Install plugins
exe 'source '.stdpath('config').'/plugins.vim'

" autocompletion
if has('nvim-0.5.0')
  set completeopt=menuone,noselect
else
  let g:deoplete#enable_at_startup = 1
  let deoplete#sources#jedi#show_docstring = 1
endif

" Syntax highlighting
filetype plugin indent on
syntax on

" Remap leader to space
let mapleader = "\<Space>"

" No Ex mode
nnoremap Q <nop>

" Set go down one caracter even on same line
noremap j gj
noremap k gk

" Cursor related
set cursorline
set relativenumber
set number
set virtualedit=onemore

" Search
set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase

" Code folding
set foldenable
if !has('nvim-0.5.0')
  set foldmethod=indent
endif

" Enable true colors if available
if ($COLORTERM=='truecolor')
  set termguicolors
endif

" Colorscheme
set background=dark
" Detect if colorscheme is installed to avoid error on start
if index(getcompletion('', 'color'), '{{ nvim_default_colorscheme }}') >= 0
  colorscheme {{ nvim_default_colorscheme }}
" Fallback on other colorschemes
elseif index(getcompletion('', 'color'), 'sonokai') >= 0
  colorscheme sonokai
elseif index(getcompletion('', 'color'), 'gruvbox-material') >= 0
  let g:gruvbox_material_palette = 'original'
  let g:gruvbox_material_background = 'soft'
  colorscheme gruvbox-material
elseif index(getcompletion('', 'color'), 'gruvbox') >= 0
  colorscheme gruvbox
endif

set pastetoggle=<F12>

" Mouse
set mouse=a
set mousehide
set guicursor=

" Encoding
scriptencoding utf-8
set fileencodings=utf-8
set encoding=utf-8

" Indent
set nowrap
set autoindent
set shiftwidth=2
set expandtab
set tabstop=2
set softtabstop=2
set nojoinspaces
set splitright
set splitbelow
set list
set listchars=tab:▷⋅,trail:⋅,nbsp:+,extends:»,precedes:«

set formatoptions+=l
set formatoptions+=n
set formatoptions+=o
set formatoptions+=r
set formatoptions-=c
set formatoptions-=t

" Persistent undo tree
set undofile

" Make vim quiet (no confirmation)
set shortmess+=filmnrxoOtT

if has('nvim-0.5.0')
  " Lightline
  function! LightlineFugitive()
    if exists('*fugitive#head')
      let branch = fugitive#head()
      return branch !=# '' ? ''.branch : ''
    endif
    return ''
  endfunction

  function! LightlineReadonly()
    return &readonly ? '' : ''
  endfunction

  let g:lightline = {
        \ 'colorscheme': 'solarized',
        \ 'component': { 'lineinfo': ' %3l:%-2v' },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' }
  \ }

  let g:lightline.component_function = {
        \ 'readonly': 'LightlineReadonly',
        \ 'fugitive': 'LightlineFugitive'
  \ }

  let g:lightline.component_expand = {
        \ 'linter_checking': 'lightline#ale#checking',
        \ 'linter_warnings': 'lightline#ale#warnings',
        \ 'linter_errors': 'lightline#ale#errors',
        \ 'linter_ok': 'lightline#ale#ok',
  \ }

  let g:lightline.component_type = {
        \ 'linter_checking': 'left',
        \ 'linter_warnings': 'warning',
        \ 'linter_errors': 'error',
        \ 'linter_ok': 'left',
  \ }

  let g:lightline.active = {
        \ 'left': [[
          \ 'mode',
          \ 'paste' ],
          \ [ 'gitbranch',
            \ 'readonly',
            \ 'filename',
            \ 'modified' ],
        \ ],
        \ 'right': [[
          \ 'linter_checking',
          \ 'linter_errors',
          \ 'linter_warnings',
          \ 'linter_ok' ],
          \ [ 'lineinfo' ],
          \ [ 'percent' ],
          \ [ 'fileformat', 'fileencoding', 'filetype' ],
        \]
  \ }
endif

if !has('nvim-0.5.0')
  " fzf shortcuts
  nnoremap <silent> <Leader>f :Files<CR>
  nnoremap <silent> <Leader>b :Buffers<CR>
  nnoremap <Leader>rg :Rg<Space>
endif

nnoremap <silent> <Leader>gl :G log<CR>
nnoremap <silent> <Leader>gc :G log<CR>
nnoremap <silent> <Leader>gs :G<CR>

" ALE
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ }
let g:ale_fix_on_save = 1

" Tagbar
nnoremap <silent> <Leader>t :TagbarToggle<CR>

" Move gutentags cache outside of project directory
let g:gutentags_cache_dir = stdpath('data').'/tags'
let g:gutentags_ctags_extra_args = [
      \ '--tag-relative=yes',
      \ '--fields=+ailmnS',
      \ ]

if has('nvim-0.5.0')
  # Custom lua config for neovim > 0.5
  lua require'treesitter-config'
  lua require'lsp-config'
  lua require'cmp-config'
  lua require'telescope-config'
  lua require'lualine-config'
endif

if !has('nvim-0.5.0')
  " Custom real time rg inside fzf
  function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
  endfunction
  command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
endif
