---
- name: Include OSX specific tasks
  include_tasks: osx.yml
  when: ansible_os_family == "Darwin"

- name: Include Debian specific tasks
  include_tasks: debian.yml
  when: ansible_os_family == "Debian"

- name: Include Arch Linux specific tasks
  include_tasks: arch.yml
  when: ansible_os_family == "Archlinux"

- name: Create nvim config directory
  file:
    path: "{{ ansible_env.HOME }}/.config/nvim/"
    state: directory

- name: Create nvim default plugin directory
  file:
    path: "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload"
    state: directory

- name: Copy nvim configuration file
  template:
    src: "init.vim.j2"
    dest: "{{ ansible_env.HOME }}/.config/nvim/init.vim"
  notify: "update neovim plugins"

- name: Copy other nvim configuration files
  copy:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}/.config/nvim/"
  notify: "update neovim plugins"
  loop:
    - plugins.vim

- name: Install vim-plug
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload/plug.vim"

- name: Create nvim python virtualenv directories
  file:
    path: "{{ nvim_venv_dir }}"
    state: directory

- name: Check if virtualenv is valid and purge if needed
  shell: >-
    {{ nvim_venv_dir }}/{{ item }}/bin/python --version ||
    rm -r {{ nvim_venv_dir }}/{{ item }}
  failed_when: false
  changed_when: false
  loop:
    - 'python2'
    - 'python3'

- name: Install neovim python bindings in a dedicated virtualenv
  # NOTE(sheeprine): neovim is used for backward compatibility and will be
  # removed soon.
  pip:
    name: "{{ item[0] }}"
    virtualenv: "{{ nvim_venv_dir }}/{{ item[1] }}"
    virtualenv_python: "{{ item[1] }}"
  loop: "{{ ['pynvim', 'neovim'] | product(['python2', 'python3']) | list }}"
  notify: "update neovim plugins"

- name: Create cleanup jobs for nvim caches
  cron:
    name: "nvim clean tags not modified since 15 days"
    minute: "0"
    user: "{{ ansible_user }}"
    job: "find {{ ansible_env.HOME }}/.local/share/nvim/tags -mtime +15 -delete"
  when: ansible_os_family != "Archlinux"

- name: Create systemd user folder
  file:
    path: "{{ ansible_env.HOME }}/.config/systemd/user/"
    state: directory
  when: ansible_os_family == "Archlinux"

- name: Create cleanup jobs for nvim caches
  copy:
    src: "nvim_cleanup.timer"
    dest: "{{ ansible_env.HOME }}/.config/systemd/user/"
  when: ansible_os_family == "Archlinux"

- name: Create cleanup jobs timer for nvim caches
  template:
    src: "nvim_cleanup.service.j2"
    dest: "{{ ansible_env.HOME }}/.config/systemd/user/nvim_cleanup.service"
  when: ansible_os_family == "Archlinux"

- name: Enable and start cleanup jobs timer
  systemd:
    name: "nvim_cleanup.timer"
    daemon_reload: true
    enabled: true
    scope: "user"
    state: "started"
  when: ansible_os_family == "Archlinux"
